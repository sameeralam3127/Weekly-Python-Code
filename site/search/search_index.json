{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Weekly Python Code","text":"<p>Welcome to Weekly Python Code! This site is your go-to resource for:</p> <ul> <li>\ud83e\udde9 Weekly Python programs.</li> <li>\ud83d\udcdd Python quizzes to test your knowledge.</li> <li>\ud83d\udcda Learning resources to enhance your skills.</li> <li>\ud83c\udfaf Interview questions and solutions to ace your interviews.</li> </ul>"},{"location":"#what-youll-find-here","title":"What You'll Find Here","text":""},{"location":"#python-programs","title":"Python Programs","text":"<p>Get weekly Python programs covering a range of topics, from basics to advanced concepts.</p>"},{"location":"#python-quizzes","title":"Python Quizzes","text":"<p>Challenge yourself with our Python quizzes designed for all levels.</p>"},{"location":"#learning-resources","title":"Learning Resources","text":"<p>Dive into Python tutorials and resources to improve your coding skills.</p>"},{"location":"#interview-prep","title":"Interview Prep","text":"<p>Prepare for Python-based interviews with our curated questions and solutions.</p> <p>Explore, learn, and grow your Python knowledge with us!</p>"},{"location":"100%20Python%20programming%20questions/","title":"100 Python programming questions","text":"<p>100 Python programming questions that are commonly asked in interviews by major multinational corporations (MNCs)</p> <ol> <li> <p>Reverse a String    Write a program to reverse a string without using built-in functions.</p> </li> <li> <p>Palindrome Check    Write a function to check if a given string is a palindrome.</p> </li> <li> <p>Fibonacci Sequence    Generate the first N numbers of the Fibonacci sequence.</p> </li> <li> <p>Prime Number Check    Write a program to check if a given number is prime.</p> </li> <li> <p>Factorial Calculation    Calculate the factorial of a given number using recursion.</p> </li> <li> <p>Sum of Digits    Write a program to find the sum of the digits of a given number.</p> </li> <li> <p>Find Largest Element in List    Write a function to find the largest element in a list.</p> </li> <li> <p>Find Second Largest Element in List    Write a function to find the second largest element in a list.</p> </li> <li> <p>List Comprehensions    Generate a list of squares of the first 10 natural numbers using list comprehension.</p> </li> <li> <p>Count Vowels in a String     Write a function to count the number of vowels in a given string.</p> </li> <li> <p>Anagram Check     Write a program to check if two strings are anagrams.</p> </li> <li> <p>Sum of Elements in a List     Write a function to find the sum of all elements in a list.</p> </li> <li> <p>Remove Duplicates from List     Write a program to remove duplicates from a list.</p> </li> <li> <p>Merge Two Sorted Lists     Write a function to merge two sorted lists into a single sorted list.</p> </li> <li> <p>Intersection of Two Lists     Write a program to find the intersection of two lists.</p> </li> <li> <p>Find the Mode in a List     Write a function to find the mode (the number that appears most frequently) in a list.</p> </li> <li> <p>Check Substring     Write a program to check if a string is a substring of another string.</p> </li> <li> <p>Matrix Multiplication     Implement matrix multiplication.</p> </li> <li> <p>Transpose of a Matrix     Write a function to find the transpose of a matrix.</p> </li> <li> <p>Binary Search     Implement binary search on a sorted list.</p> </li> <li> <p>Bubble Sort     Write a program to sort a list using bubble sort.</p> </li> <li> <p>Insertion Sort     Write a program to sort a list using insertion sort.</p> </li> <li> <p>Selection Sort     Write a program to sort a list using selection sort.</p> </li> <li> <p>Merge Sort     Implement merge sort.</p> </li> <li> <p>Quick Sort     Implement quick sort.</p> </li> <li> <p>Find the GCD     Write a function to find the greatest common divisor (GCD) of two numbers.</p> </li> <li> <p>LCM Calculation     Write a function to find the least common multiple (LCM) of two numbers.</p> </li> <li> <p>Armstrong Number Check     Write a program to check if a number is an Armstrong number.</p> </li> <li> <p>Generate Prime Numbers     Write a program to generate all prime numbers up to a given limit.</p> </li> <li> <p>Sum of Squares of First N Natural Numbers     Write a function to calculate the sum of squares of the first N natural numbers.</p> </li> <li> <p>Convert Decimal to Binary     Write a program to convert a decimal number to its binary representation.</p> </li> <li> <p>Convert Binary to Decimal     Write a program to convert a binary number to its decimal representation.</p> </li> <li> <p>Check Perfect Number     Write a program to check if a number is a perfect number.</p> </li> <li> <p>Find Common Elements in Two Lists     Write a function to find common elements in two lists.</p> </li> <li> <p>Check for Unique Characters in String     Write a function to check if a string has all unique characters.</p> </li> <li> <p>Rotate List     Write a program to rotate a list by k elements.</p> </li> <li> <p>Check for Balanced Parentheses     Write a program to check if an expression has balanced parentheses.</p> </li> <li> <p>Find Minimum in Rotated Sorted Array     Write a function to find the minimum element in a rotated sorted array.</p> </li> <li> <p>Count Occurrences of Each Element in List     Write a program to count the occurrences of each element in a list.</p> </li> <li> <p>Find Missing Number in List     Write a function to find the missing number in a list of integers from 1 to N.</p> </li> <li> <p>Find Duplicate Number in List     Write a function to find the duplicate number in a list of integers.</p> </li> <li> <p>Sum of Even Numbers in List     Write a program to find the sum of all even numbers in a list.</p> </li> <li> <p>Product of All Elements in List     Write a function to find the product of all elements in a list.</p> </li> <li> <p>Flatten a Nested List     Write a program to flatten a nested list.</p> </li> <li> <p>Generate All Permutations of String     Write a function to generate all permutations of a given string.</p> </li> <li> <p>Longest Common Substring     Write a program to find the longest common substring between two strings.</p> </li> <li> <p>Longest Increasing Subsequence     Write a program to find the longest increasing subsequence in a list.</p> </li> <li> <p>Merge Intervals     Write a function to merge overlapping intervals.</p> </li> <li> <p>Find Kth Largest Element in List     Write a function to find the Kth largest element in a list.</p> </li> <li> <p>Find Kth Smallest Element in List     Write a function to find the Kth smallest element in a list.</p> </li> <li> <p>Count Frequency of Characters in String     Write a program to count the frequency of each character in a string.</p> </li> <li> <p>Group Anagrams     Write a function to group anagrams from a list of strings.</p> </li> <li> <p>Find Longest Palindromic Substring     Write a program to find the longest palindromic substring in a given string.</p> </li> <li> <p>Maximum Subarray Sum (Kadane's Algorithm)     Write a program to find the maximum sum of a contiguous subarray.</p> </li> <li> <p>Find Peak Element in List     Write a function to find a peak element in a list.</p> </li> <li> <p>Find Majority Element in List     Write a program to find the majority element (element that appears more than n/2 times) in a list.</p> </li> <li> <p>Implement a Stack Using Queues     Write a program to implement a stack using queues.</p> </li> <li> <p>Implement a Queue Using Stacks     Write a program to implement a queue using stacks.</p> </li> <li> <p>Evaluate Postfix Expression     Write a function to evaluate a postfix expression.</p> </li> <li> <p>Evaluate Prefix Expression     Write a function to evaluate a prefix expression.</p> </li> <li> <p>Next Greater Element     Write a program to find the next greater element for each element in an array.</p> </li> <li> <p>Valid Sudoku     Write a program to check if a given Sudoku board configuration is valid.</p> </li> <li> <p>Generate Pascal's Triangle     Write a function to generate Pascal's triangle up to n rows.</p> </li> <li> <p>Check for Palindromic Number     Write a program to check if a number is a palindrome.</p> </li> <li> <p>Find All Pairs with Given Sum     Write a function to find all pairs of integers in a list that sum to a given value.</p> </li> <li> <p>Convert Roman Numerals to Integer     Write a program to convert a Roman numeral to an integer.</p> </li> <li> <p>Convert Integer to Roman Numerals     Write a program to convert an integer to a Roman numeral.</p> </li> <li> <p>Find Longest Substring Without Repeating Characters     Write a program to find the longest substring without repeating characters.</p> </li> <li> <p>Detect Cycle in a Linked List     Write a function to detect a cycle in a linked list.</p> </li> <li> <p>Remove Duplicates from Sorted Linked List     Write a function to remove duplicates from a sorted linked list.</p> </li> <li> <p>Reverse a Linked List     Write a program to reverse a linked list.</p> </li> <li> <p>Merge Two Sorted Linked Lists     Write a function to merge two sorted linked lists into one sorted linked list.</p> </li> <li> <p>Find Intersection Point of Two Linked Lists     Write a program to find the intersection point of two linked lists.</p> </li> <li> <p>Find Middle Element of Linked List     Write a function to find the middle element of a linked list.</p> </li> <li> <p>Clone a Linked List with Random Pointers     Write a program to clone a linked list where each node has a random pointer.</p> </li> <li> <p>Flatten a Linked List     Write a function to flatten a linked list where each node may have a child linked list.</p> </li> <li> <p>Implement LRU Cache     Write a program to implement an LRU (Least Recently Used) cache.</p> </li> <li> <p>Find Minimum Depth of Binary Tree     Write a function to find the minimum depth of a binary tree.</p> </li> <li> <p>Find Maximum Depth of Binary Tree     Write a function to find the maximum depth of a binary tree.</p> </li> <li> <p>Check if Binary Tree is Balanced     Write a program to check if a binary tree is height-balanced.</p> </li> <li> <p>Inorder Traversal of Binary Tree     Write a function to perform inorder traversal of a binary tree.</p> </li> <li> <p>Preorder Traversal of Binary Tree     Write a function to perform preorder traversal of a binary tree.</p> </li> <li> <p>Postorder Traversal of Binary Tree     Write a function to perform postorder traversal of a binary tree.</p> </li> <li> <p>Level Order Traversal of Binary Tree     Write a program to perform level order traversal of a binary tree.</p> </li> <li> <p>Convert Sorted Array to Balanced BST     Write a function to convert a sorted array to a balanced binary search tree.</p> </li> <li> <p>Lowest Common Ancestor in BST     Write a program to find the lowest common ancestor of two nodes in a binary search tree.</p> </li> <li> <p>Validate Binary Search Tree     Write a function to check if a binary tree is a valid binary search tree.</p> </li> <li> <p>Symmetric Tree Check     Write a program to check if a binary tree is</p> </li> </ol> <p>symmetric.</p> <ol> <li> <p>Path Sum in Binary Tree     Write a function to check if there is a root-to-leaf path in a binary tree with a given sum.</p> </li> <li> <p>Serialize and Deserialize Binary Tree     Write a program to serialize and deserialize a binary tree.</p> </li> <li> <p>Find Kth Smallest Element in BST     Write a function to find the Kth smallest element in a binary search tree.</p> </li> <li> <p>Find Kth Largest Element in BST     Write a function to find the Kth largest element in a binary search tree.</p> </li> <li> <p>Convert Binary Tree to Linked List     Write a program to convert a binary tree to a doubly linked list.</p> </li> <li> <p>Trie Implementation     Write a program to implement a trie (prefix tree).</p> </li> <li> <p>Word Search in Matrix     Write a function to find if a given word exists in a matrix of characters.</p> </li> <li> <p>Longest Consecutive Sequence     Write a program to find the longest consecutive sequence in an unsorted array.</p> </li> <li> <p>Edit Distance     Write a function to find the minimum number of operations required to convert one string to another.</p> </li> <li> <p>Minimum Window Substring     Write a program to find the minimum window substring that contains all characters of a given string.</p> </li> <li> <p>Sliding Window Maximum     Write a function to find the maximum in each sliding window of size k in an array.</p> </li> <li> <p>Course Schedule (Topological Sort)     Write a program to determine if you can finish all courses given prerequisites in the form of a directed acyclic graph.</p> </li> </ol> <p>These questions cover a wide range of topics and difficulty levels, providing a comprehensive set of challenges for preparing for interviews with major multinational companies.</p>"},{"location":"100%20basic%20Python%20programs/","title":"100 basic Python programs","text":"<p>100 basic Python programs:</p> <ol> <li>Hello World Program</li> </ol> <pre><code>print(\"Hello, World!\")\n</code></pre> <ol> <li>Addition of Two Numbers</li> </ol> <pre><code>num1 = 5\nnum2 = 7\nsum = num1 + num2\nprint(\"Sum:\", sum)\n</code></pre> <ol> <li>Subtraction of Two Numbers</li> </ol> <pre><code>num1 = 10\nnum2 = 4\ndifference = num1 - num2\nprint(\"Difference:\", difference)\n</code></pre> <ol> <li>Multiplication of Two Numbers</li> </ol> <pre><code>num1 = 3\nnum2 = 6\nproduct = num1 * num2\nprint(\"Product:\", product)\n</code></pre> <ol> <li>Division of Two Numbers</li> </ol> <pre><code>num1 = 20\nnum2 = 5\nquotient = num1 / num2\nprint(\"Quotient:\", quotient)\n</code></pre> <ol> <li>Modulus of Two Numbers</li> </ol> <pre><code>num1 = 15\nnum2 = 4\nremainder = num1 % num2\nprint(\"Remainder:\", remainder)\n</code></pre> <ol> <li>Exponentiation</li> </ol> <pre><code>base = 2\nexponent = 3\nresult = base ** exponent\nprint(\"Result:\", result)\n</code></pre> <ol> <li>Square of a Number</li> </ol> <pre><code>num = 4\nsquare = num ** 2\nprint(\"Square:\", square)\n</code></pre> <ol> <li>Cube of a Number</li> </ol> <pre><code>num = 3\ncube = num ** 3\nprint(\"Cube:\", cube)\n</code></pre> <ol> <li>Area of a Rectangle</li> </ol> <pre><code>length = 5\nwidth = 3\narea = length * width\nprint(\"Area of Rectangle:\", area)\n</code></pre> <ol> <li>Area of a Circle</li> </ol> <pre><code>radius = 7\narea = 3.14 * (radius ** 2)\nprint(\"Area of Circle:\", area)\n</code></pre> <ol> <li>Perimeter of a Rectangle</li> </ol> <pre><code>length = 4\nwidth = 6\nperimeter = 2 * (length + width)\nprint(\"Perimeter of Rectangle:\", perimeter)\n</code></pre> <ol> <li>Perimeter of a Circle</li> </ol> <pre><code>radius = 8\nperimeter = 2 * 3.14 * radius\nprint(\"Perimeter of Circle:\", perimeter)\n</code></pre> <ol> <li>Simple Interest</li> </ol> <pre><code>principal = 1000\nrate = 5\ntime = 2\nsimple_interest = (principal * rate * time) / 100\nprint(\"Simple Interest:\", simple_interest)\n</code></pre> <ol> <li>Compound Interest</li> </ol> <pre><code>principal = 1500\nrate = 5\ntime = 2\ncompound_interest = principal * ((1 + rate / 100) ** time)\nprint(\"Compound Interest:\", compound_interest)\n</code></pre> <ol> <li>Check If a Number is Even or Odd</li> </ol> <pre><code>num = 9\nif num % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")\n</code></pre> <ol> <li>Check If a Number is Positive or Negative</li> </ol> <pre><code>num = -3\nif num &gt;= 0:\n    print(\"Positive\")\nelse:\n    print(\"Negative\")\n</code></pre> <ol> <li>Check If a Year is a Leap Year</li> </ol> <pre><code>year = 2024\nif (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n    print(\"Leap Year\")\nelse:\n    print(\"Not a Leap Year\")\n</code></pre> <ol> <li>Find the Largest Among Three Numbers</li> </ol> <pre><code>num1 = 12\nnum2 = 18\nnum3 = 7\nif num1 &gt;= num2 and num1 &gt;= num3:\n    print(\"Largest:\", num1)\nelif num2 &gt;= num1 and num2 &gt;= num3:\n    print(\"Largest:\", num2)\nelse:\n    print(\"Largest:\", num3)\n</code></pre> <ol> <li>Find the Factorial of a Number</li> </ol> <pre><code>num = 5\nfactorial = 1\nfor i in range(1, num + 1):\n    factorial *= i\nprint(\"Factorial:\", factorial)\n</code></pre> <ol> <li>Find the Fibonacci Series</li> </ol> <pre><code>num = 10\na, b = 0, 1\nfib_series = [a, b]\nfor i in range(2, num):\n    c = a + b\n    a, b = b, c\n    fib_series.append(c)\nprint(\"Fibonacci Series:\", fib_series)\n</code></pre> <ol> <li>Check If a Number is Prime</li> </ol> <pre><code>num = 17\nis_prime = True\nif num &gt; 1:\n    for i in range(2, int(num/2) + 1):\n        if num % i == 0:\n            is_prime = False\n            break\nif is_prime:\n    print(\"Prime\")\nelse:\n    print(\"Not Prime\")\n</code></pre> <ol> <li>Find the Prime Numbers in a Range</li> </ol> <pre><code>start = 10\nend = 50\nprime_numbers = []\nfor num in range(start, end + 1):\n    if num &gt; 1:\n        for i in range(2, int(num/2) + 1):\n            if num % i == 0:\n                break\n        else:\n            prime_numbers.append(num)\nprint(\"Prime Numbers:\", prime_numbers)\n</code></pre> <ol> <li>Reverse a Number</li> </ol> <pre><code>num = 1234\nreverse = 0\nwhile num &gt; 0:\n    remainder = num % 10\n    reverse = reverse * 10 + remainder\n    num //= 10\nprint(\"Reverse:\", reverse)\n</code></pre> <ol> <li>Find the Sum of Digits of a Number</li> </ol> <pre><code>num = 12345\nsum = 0\nwhile num &gt; 0:\n    digit = num % 10\n    sum += digit\n    num //= 10\nprint(\"Sum of Digits:\", sum)\n</code></pre> <ol> <li>Check If a Number is an Armstrong Number</li> </ol> <pre><code>num = 153\nsum = 0\ntemp = num\nwhile temp &gt; 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\nif num == sum:\n    print(\"Armstrong Number\")\nelse:\n    print(\"Not Armstrong Number\")\n</code></pre> <ol> <li>Find the Armstrong Numbers in a Range</li> </ol> <pre><code>start = 100\nend = 500\narmstrong_numbers = []\nfor num in range(start, end + 1):\n    sum = 0\n    temp = num\n    while temp &gt; 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if num == sum:\n        armstrong_numbers.append(num)\nprint(\"Armstrong Numbers:\", armstrong_numbers)\n</code></pre> <ol> <li>Find the LCM of Two Numbers</li> </ol> <pre><code>num1 = 12\nnum2 = 15\nif num1 &gt; num2:\n    greater = num1\nelse:\n    greater = num2\nwhile True:\n    if greater % num1 == 0 and greater % num2 == 0:\n        lcm = greater\n        break\n    greater += 1\nprint(\"LCM:\", lcm)\n</code></pre> <ol> <li>Find the GCD of Two Numbers</li> </ol> <pre><code>num1 = 24\nnum2 = 36\nwhile num2 != 0:\n\n\n temp = num2\n    num2 = num1 % num2\n    num1 = temp\ngcd = num1\nprint(\"GCD:\", gcd)\n</code></pre> <ol> <li>Convert Decimal to Binary</li> </ol> <pre><code>decimal = 10\nbinary = \"\"\nwhile decimal &gt; 0:\n    binary = str(decimal % 2) + binary\n    decimal //= 2\nprint(\"Binary:\", binary)\n</code></pre> <ol> <li>Convert Decimal to Octal</li> </ol> <pre><code>decimal = 20\noctal = \"\"\nwhile decimal &gt; 0:\n    octal = str(decimal % 8) + octal\n    decimal //= 8\nprint(\"Octal:\", octal)\n</code></pre> <ol> <li>Convert Decimal to Hexadecimal</li> </ol> <pre><code>decimal = 30\nhexadecimal = \"\"\nwhile decimal &gt; 0:\n    remainder = decimal % 16\n    if remainder &lt; 10:\n        hexadecimal = str(remainder) + hexadecimal\n    else:\n        hexadecimal = chr(remainder + 55) + hexadecimal\n    decimal //= 16\nprint(\"Hexadecimal:\", hexadecimal)\n</code></pre> <ol> <li>Convert Binary to Decimal</li> </ol> <pre><code>binary = \"1010\"\ndecimal = 0\nfor i in range(len(binary)):\n    decimal += int(binary[len(binary) - 1 - i]) * (2 ** i)\nprint(\"Decimal:\", decimal)\n</code></pre> <ol> <li>Convert Binary to Octal</li> </ol> <pre><code>binary = \"1010\"\ndecimal = 0\nfor i in range(len(binary)):\n    decimal += int(binary[len(binary) - 1 - i]) * (2 ** i)\noctal = \"\"\nwhile decimal &gt; 0:\n    octal = str(decimal % 8) + octal\n    decimal //= 8\nprint(\"Octal:\", octal)\n</code></pre> <ol> <li>Convert Binary to Hexadecimal</li> </ol> <pre><code>binary = \"1010\"\ndecimal = 0\nfor i in range(len(binary)):\n    decimal += int(binary[len(binary) - 1 - i]) * (2 ** i)\nhexadecimal = \"\"\nwhile decimal &gt; 0:\n    remainder = decimal % 16\n    if remainder &lt; 10:\n        hexadecimal = str(remainder) + hexadecimal\n    else:\n        hexadecimal = chr(remainder + 55) + hexadecimal\n    decimal //= 16\nprint(\"Hexadecimal:\", hexadecimal)\n</code></pre> <ol> <li>Convert Octal to Decimal</li> </ol> <pre><code>octal = \"24\"\ndecimal = 0\nfor i in range(len(octal)):\n    decimal += int(octal[len(octal) - 1 - i]) * (8 ** i)\nprint(\"Decimal:\", decimal)\n</code></pre> <ol> <li>Convert Octal to Binary</li> </ol> <pre><code>octal = \"24\"\ndecimal = 0\nfor i in range(len(octal)):\n    decimal += int(octal[len(octal) - 1 - i]) * (8 ** i)\nbinary = \"\"\nwhile decimal &gt; 0:\n    binary = str(decimal % 2) + binary\n    decimal //= 2\nprint(\"Binary:\", binary)\n</code></pre> <ol> <li>Convert Octal to Hexadecimal</li> </ol> <pre><code>octal = \"24\"\ndecimal = 0\nfor i in range(len(octal)):\n    decimal += int(octal[len(octal) - 1 - i]) * (8 ** i)\nhexadecimal = \"\"\nwhile decimal &gt; 0:\n    remainder = decimal % 16\n    if remainder &lt; 10:\n        hexadecimal = str(remainder) + hexadecimal\n    else:\n        hexadecimal = chr(remainder + 55) + hexadecimal\n    decimal //= 16\nprint(\"Hexadecimal:\", hexadecimal)\n</code></pre> <ol> <li>Convert Hexadecimal to Decimal</li> </ol> <pre><code>hexadecimal = \"1E\"\ndecimal = 0\nfor i in range(len(hexadecimal)):\n    if hexadecimal[i].isdigit():\n        decimal += int(hexadecimal[i]) * (16 ** (len(hexadecimal) - 1 - i))\n    else:\n        decimal += (ord(hexadecimal[i].upper()) - 55) * (16 ** (len(hexadecimal) - 1 - i))\nprint(\"Decimal:\", decimal)\n</code></pre> <ol> <li>Convert Hexadecimal to Binary</li> </ol> <pre><code>hexadecimal = \"1E\"\ndecimal = 0\nfor i in range(len(hexadecimal)):\n    if hexadecimal[i].isdigit():\n        decimal += int(hexadecimal[i]) * (16 ** (len(hexadecimal) - 1 - i))\n    else:\n        decimal += (ord(hexadecimal[i].upper()) - 55) * (16 ** (len(hexadecimal) - 1 - i))\nbinary = \"\"\nwhile decimal &gt; 0:\n    binary = str(decimal % 2) + binary\n    decimal //= 2\nprint(\"Binary:\", binary)\n</code></pre> <ol> <li>Convert Hexadecimal to Octal</li> </ol> <pre><code>hexadecimal = \"1E\"\ndecimal = 0\nfor i in range(len(hexadecimal)):\n    if hexadecimal[i].isdigit():\n        decimal += int(hexadecimal[i]) * (16 ** (len(hexadecimal) - 1 - i))\n    else:\n        decimal += (ord(hexadecimal[i].upper()) - 55) * (16 ** (len(hexadecimal) - 1 - i))\noctal = \"\"\nwhile decimal &gt; 0:\n    octal = str(decimal % 8) + octal\n    decimal //= 8\nprint(\"Octal:\", octal)\n</code></pre> <ol> <li>Check If a String is Palindrome</li> </ol> <pre><code>string = \"radar\"\nif string == string[::-1]:\n    print(\"Palindrome\")\nelse:\n    print(\"Not Palindrome\")\n</code></pre> <ol> <li>Count the Number of Vowels in a String</li> </ol> <pre><code>string = \"hello\"\nvowels = \"aeiouAEIOU\"\ncount = 0\nfor char in string:\n    if char in vowels:\n        count += 1\nprint(\"Number of Vowels:\", count)\n</code></pre> <ol> <li>Count the Number of Words in a String</li> </ol> <pre><code>string = \"Hello, how are you?\"\nwords = string.split()\nprint(\"Number of Words:\", len(words))\n</code></pre> <ol> <li>Reverse a String</li> </ol> <pre><code>string = \"hello\"\nreverse = string[::-1]\nprint(\"Reverse:\", reverse)\n</code></pre> <ol> <li>Capitalize the First Letter of Each Word in a String</li> </ol> <pre><code>string = \"hello world\"\ncapitalized = string.title()\nprint(\"Capitalized:\", capitalized)\n</code></pre> <ol> <li>Remove Punctuation from a String</li> </ol> <pre><code>string = \"Hello, World!\"\npunctuation = '''!()-[]{};:'\"\\,&lt;&gt;./?@#$%^&amp;*_~'''\nno_punctuation = \"\"\nfor char in string:\n    if char not in punctuation:\n        no_punctuation += char\nprint(\"No Punctuation:\", no_punctuation)\n</code></pre> <ol> <li>Find the Longest Word in a String</li> </ol> <pre><code>string = \"Hello world, how are you?\"\nwords = string.split()\nlongest_word = max(words, key=len)\nprint(\"Longest Word:\", longest_word)\n</code></pre> <ol> <li>Count the Number of Occurrences of a Character in a String</li> </ol> <pre><code>string = \"hello world\"\nchar = 'l'\ncount = string.count(char)\nprint(\"Occurrences of '{}' : {}\".format(char, count))\n</code></pre> <ol> <li>Concatenate Two Strings</li> </ol> <pre><code>string1 = \"Hello\"\nstring2 = \"World\"\nconcatenated = string1 + \" \" +\n\n string2\nprint(\"Concatenated:\", concatenated)\n</code></pre> <ol> <li>Check If Two Strings are Anagrams</li> </ol> <pre><code>string1 = \"listen\"\nstring2 = \"silent\"\nif sorted(string1) == sorted(string2):\n    print(\"Anagrams\")\nelse:\n    print(\"Not Anagrams\")\n</code></pre> <ol> <li>Find the ASCII Value of a Character</li> </ol> <pre><code>char = 'A'\nascii_value = ord(char)\nprint(\"ASCII Value:\", ascii_value)\n</code></pre> <ol> <li>Find the Character from an ASCII Value</li> </ol> <pre><code>ascii_value = 65\nchar = chr(ascii_value)\nprint(\"Character:\", char)\n</code></pre> <ol> <li>Remove Spaces from a String</li> </ol> <pre><code>string = \"Hello world\"\nno_spaces = string.replace(\" \", \"\")\nprint(\"No Spaces:\", no_spaces)\n</code></pre> <ol> <li>Convert Lowercase to Uppercase</li> </ol> <pre><code>string = \"hello\"\nuppercase = string.upper()\nprint(\"Uppercase:\", uppercase)\n</code></pre> <ol> <li>Convert Uppercase to Lowercase</li> </ol> <pre><code>string = \"HELLO\"\nlowercase = string.lower()\nprint(\"Lowercase:\", lowercase)\n</code></pre> <ol> <li>Find the Smallest Among Three Numbers</li> </ol> <pre><code>num1 = 10\nnum2 = 7\nnum3 = 13\nif num1 &lt;= num2 and num1 &lt;= num3:\n    print(\"Smallest:\", num1)\nelif num2 &lt;= num1 and num2 &lt;= num3:\n    print(\"Smallest:\", num2)\nelse:\n    print(\"Smallest:\", num3)\n</code></pre> <ol> <li>Swap Two Numbers</li> </ol> <pre><code>num1 = 5\nnum2 = 8\nnum1, num2 = num2, num1\nprint(\"Swapped Numbers:\", num1, num2)\n</code></pre> <ol> <li>Find the Sum of Natural Numbers</li> </ol> <pre><code>n = 10\nsum = n * (n + 1) // 2\nprint(\"Sum of Natural Numbers:\", sum)\n</code></pre> <ol> <li>Find the Sum of Natural Numbers using Loop</li> </ol> <pre><code>n = 10\nsum = 0\nfor i in range(1, n + 1):\n    sum += i\nprint(\"Sum of Natural Numbers:\", sum)\n</code></pre> <ol> <li>Find the Sum of Squares of Natural Numbers</li> </ol> <pre><code>n = 5\nsum = n * (n + 1) * (2 * n + 1) // 6\nprint(\"Sum of Squares of Natural Numbers:\", sum)\n</code></pre> <ol> <li>Find the Sum of Squares of Natural Numbers using Loop</li> </ol> <pre><code>n = 5\nsum = 0\nfor i in range(1, n + 1):\n    sum += i ** 2\nprint(\"Sum of Squares of Natural Numbers:\", sum)\n</code></pre> <ol> <li>Find the Sum of Cubes of Natural Numbers</li> </ol> <pre><code>n = 4\nsum = (n * (n + 1) // 2) ** 2\nprint(\"Sum of Cubes of Natural Numbers:\", sum)\n</code></pre> <ol> <li>Find the Sum of Cubes of Natural Numbers using Loop</li> </ol> <pre><code>n = 4\nsum = 0\nfor i in range(1, n + 1):\n    sum += i ** 3\nprint(\"Sum of Cubes of Natural Numbers:\", sum)\n</code></pre> <ol> <li>Find the Area of a Triangle</li> </ol> <pre><code>base = 6\nheight = 4\narea = 0.5 * base * height\nprint(\"Area of Triangle:\", area)\n</code></pre> <ol> <li>Check If a Triangle is Equilateral, Isosceles, or Scalene</li> </ol> <pre><code>side1 = 5\nside2 = 5\nside3 = 5\nif side1 == side2 == side3:\n    print(\"Equilateral\")\nelif side1 == side2 or side2 == side3 or side3 == side1:\n    print(\"Isosceles\")\nelse:\n    print(\"Scalene\")\n</code></pre> <ol> <li>Check If a Number is Perfect</li> </ol> <pre><code>num = 28\nsum = 0\nfor i in range(1, num):\n    if num % i == 0:\n        sum += i\nif sum == num:\n    print(\"Perfect\")\nelse:\n    print(\"Not Perfect\")\n</code></pre> <ol> <li>Check If a Number is Abundant</li> </ol> <pre><code>num = 12\nsum = 0\nfor i in range(1, num):\n    if num % i == 0:\n        sum += i\nif sum &gt; num:\n    print(\"Abundant\")\nelse:\n    print(\"Not Abundant\")\n</code></pre> <ol> <li>Check If a Number is Deficient</li> </ol> <pre><code>num = 15\nsum = 0\nfor i in range(1, num):\n    if num % i == 0:\n        sum += i\nif sum &lt; num:\n    print(\"Deficient\")\nelse:\n    print(\"Not Deficient\")\n</code></pre> <ol> <li>Find the Sum of Factors of a Number</li> </ol> <pre><code>num = 20\nsum = 0\nfor i in range(1, num + 1):\n    if num % i == 0:\n        sum += i\nprint(\"Sum of Factors:\", sum)\n</code></pre> <ol> <li>Find the Product of Factors of a Number</li> </ol> <pre><code>num = 30\nproduct = 1\nfor i in range(1, num + 1):\n    if num % i == 0:\n        product *= i\nprint(\"Product of Factors:\", product)\n</code></pre> <ol> <li>Check If a Number is Prime or Composite</li> </ol> <pre><code>num = 11\nif num &gt; 1:\n    for i in range(2, int(num/2) + 1):\n        if num % i == 0:\n            print(\"Composite\")\n            break\n    else:\n        print(\"Prime\")\nelse:\n    print(\"Composite\")\n</code></pre> <ol> <li>Find the Prime Factors of a Number</li> </ol> <pre><code>num = 24\nprime_factors = []\nfor i in range(2, num + 1):\n    while num % i == 0:\n        prime_factors.append(i)\n        num //= i\nprint(\"Prime Factors:\", prime_factors)\n</code></pre> <ol> <li>Find the Sum of First n Natural Numbers</li> </ol> <pre><code>n = 10\nsum = n * (n + 1) // 2\nprint(\"Sum of First {} Natural Numbers:\".format(n), sum)\n</code></pre> <ol> <li>Find the Sum of First n Natural Numbers using Loop</li> </ol> <pre><code>n = 10\nsum = 0\nfor i in range(1, n + 1):\n    sum += i\nprint(\"Sum of First {} Natural Numbers:\".format(n), sum)\n</code></pre> <ol> <li>Check If a Number is a Perfect Square</li> </ol> <pre><code>num = 16\nif num &gt;= 0 and int(num ** 0.5) ** 2 == num:\n    print(\"Perfect Square\")\nelse:\n    print(\"Not Perfect Square\")\n</code></pre> <ol> <li>Find the Square Root of a Number</li> </ol> <pre><code>num = 25\nsquare_root = num ** 0.5\nprint(\"Square Root:\", square_root)\n</code></pre> <ol> <li>Find the Cube Root of a Number</li> </ol> <pre><code>num = 64\ncube_root = num ** (1/3)\nprint(\"Cube Root:\", cube\n\n_root)\n</code></pre> <ol> <li>Find the Smallest Element in a List</li> </ol> <pre><code>numbers = [5, 2, 8, 1, 9]\nsmallest = min(numbers)\nprint(\"Smallest Element:\", smallest)\n</code></pre> <ol> <li>Find the Largest Element in a List</li> </ol> <pre><code>numbers = [5, 2, 8, 1, 9]\nlargest = max(numbers)\nprint(\"Largest Element:\", largest)\n</code></pre> <ol> <li>Find the Second Largest Element in a List</li> </ol> <pre><code>numbers = [5, 2, 8, 1, 9]\nsorted_numbers = sorted(numbers)\nsecond_largest = sorted_numbers[-2]\nprint(\"Second Largest Element:\", second_largest)\n</code></pre> <ol> <li>Find the Sum of Elements in a List</li> </ol> <pre><code>numbers = [5, 2, 8, 1, 9]\nsum = 0\nfor num in numbers:\n    sum += num\nprint(\"Sum of Elements:\", sum)\n</code></pre> <ol> <li>Find the Average of Elements in a List</li> </ol> <pre><code>numbers = [5, 2, 8, 1, 9]\naverage = sum(numbers) / len(numbers)\nprint(\"Average of Elements:\", average)\n</code></pre> <ol> <li>Count the Number of Even and Odd Numbers in a List</li> </ol> <pre><code>numbers = [5, 2, 8, 1, 9]\neven_count = 0\nodd_count = 0\nfor num in numbers:\n    if num % 2 == 0:\n        even_count += 1\n    else:\n        odd_count += 1\nprint(\"Even Count:\", even_count)\nprint(\"Odd Count:\", odd_count)\n</code></pre> <ol> <li>Remove Duplicate Elements from a List</li> </ol> <pre><code>numbers = [5, 2, 8, 5, 1, 9, 2]\nunique_numbers = list(set(numbers))\nprint(\"Unique Elements:\", unique_numbers)\n</code></pre> <ol> <li>Check If a List is Empty</li> </ol> <pre><code>numbers = []\nif not numbers:\n    print(\"List is Empty\")\nelse:\n    print(\"List is Not Empty\")\n</code></pre> <ol> <li>Reverse a List</li> </ol> <pre><code>numbers = [5, 2, 8, 1, 9]\nreversed_numbers = numbers[::-1]\nprint(\"Reversed List:\", reversed_numbers)\n</code></pre> <ol> <li>Concatenate Two Lists</li> </ol> <pre><code>list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nconcatenated_list = list1 + list2\nprint(\"Concatenated List:\", concatenated_list)\n</code></pre> <ol> <li>Find the Union of Two Lists</li> </ol> <pre><code>list1 = [1, 2, 3]\nlist2 = [3, 4, 5]\nunion_list = list(set(list1 + list2))\nprint(\"Union of Lists:\", union_list)\n</code></pre> <ol> <li>Find the Intersection of Two Lists</li> </ol> <pre><code>list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\nintersection_list = list(set(list1) &amp; set(list2))\nprint(\"Intersection of Lists:\", intersection_list)\n</code></pre> <ol> <li>Find the Difference Between Two Lists</li> </ol> <pre><code>list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\ndifference_list = list(set(list1) - set(list2))\nprint(\"Difference Between Lists:\", difference_list)\n</code></pre> <ol> <li>Check If a List is Palindrome</li> </ol> <pre><code>numbers = [1, 2, 3, 2, 1]\nif numbers == numbers[::-1]:\n    print(\"Palindrome\")\nelse:\n    print(\"Not Palindrome\")\n</code></pre> <ol> <li>Check If a List is Sorted</li> </ol> <pre><code>numbers = [1, 2, 3, 4, 5]\nif numbers == sorted(numbers):\n    print(\"Sorted\")\nelse:\n    print(\"Not Sorted\")\n</code></pre> <ol> <li>Bubble Sort</li> </ol> <pre><code>numbers = [64, 25, 12, 22, 11]\nfor i in range(len(numbers)):\n    for j in range(len(numbers) - 1):\n        if numbers[j] &gt; numbers[j + 1]:\n            numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]\nprint(\"Sorted List:\", numbers)\n</code></pre> <ol> <li>Selection Sort</li> </ol> <pre><code>numbers = [64, 25, 12, 22, 11]\nfor i in range(len(numbers)):\n    min_index = i\n    for j in range(i + 1, len(numbers)):\n        if numbers[j] &lt; numbers[min_index]:\n            min_index = j\n    numbers[i], numbers[min_index] = numbers[min_index], numbers[i]\nprint(\"Sorted List:\", numbers)\n</code></pre> <ol> <li>Insertion Sort</li> </ol> <pre><code>numbers = [64, 25, 12, 22, 11]\nfor i in range(1, len(numbers)):\n    key = numbers[i]\n    j = i - 1\n    while j &gt;= 0 and key &lt; numbers[j]:\n        numbers[j + 1] = numbers[j]\n        j -= 1\n    numbers[j + 1] = key\nprint(\"Sorted List:\", numbers)\n</code></pre> <ol> <li>Linear Search</li> </ol> <pre><code>numbers = [64, 25, 12, 22, 11]\ntarget = 12\nfound = False\nfor i in range(len(numbers)):\n    if numbers[i] == target:\n        print(\"Element found at index:\", i)\n        found = True\n        break\nif not found:\n    print(\"Element not found\")\n</code></pre> <ol> <li>Binary Search</li> </ol> <pre><code>def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left &lt;= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] &lt; target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nnumbers = [11, 12, 22, 25, 64]\ntarget = 12\nresult = binary_search(numbers, target)\nif result != -1:\n    print(\"Element found at index:\", result)\nelse:\n    print(\"Element not found\")\n</code></pre> <ol> <li>Merge Sort</li> </ol> <pre><code>def merge_sort(arr):\n    if len(arr) &gt; 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i &lt; len(left_half) and j &lt; len(right_half):\n            if left_half[i] &lt; right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i &lt; len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j &lt; len(right_half):\n            arr[k] = right\n\n_half[j]\n            j += 1\n            k += 1\n\nnumbers = [64, 25, 12, 22, 11]\nmerge_sort(numbers)\nprint(\"Sorted List:\", numbers)\n</code></pre> <ol> <li>Quick Sort</li> </ol> <pre><code>def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] &lt; pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n    return i + 1\n\ndef quick_sort(arr, low, high):\n    if low &lt; high:\n        pi = partition(arr, low, high)\n        quick_sort(arr, low, pi - 1)\n        quick_sort(arr, pi + 1, high)\n\nnumbers = [64, 25, 12, 22, 11]\nquick_sort(numbers, 0, len(numbers) - 1)\nprint(\"Sorted List:\", numbers)\n</code></pre> <p>These are basic Python programs covering various concepts such as arithmetic operations, conditionals, loops, functions, and data structures like lists.</p>"},{"location":"Python_All_types%20_of_loops/","title":"Python code demonstrating all types of loops:","text":"<p>For Loop: A loop that iterates over a sequence (like a list, tuple, dictionary, string, or range).</p> <p>While Loop: A loop that continues to execute as long as the condition is true.</p> <p>Nested Loops: Loops within loops.</p> <p>Loop with Else: A loop with an else block that executes after the loop completes normally (without a break).</p>"},{"location":"Python_All_types%20_of_loops/#for-loop-to-iterate-over-a-list","title":"For loop to iterate over a list","text":"<pre><code>numbers = [1, 2, 3, 4, 5]\nfor number in numbers:\n    print(f\"For loop, number: {number}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#for-loop-to-iterate-over-a-dictionary","title":"For loop to iterate over a dictionary","text":"<pre><code>person = {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}\nfor key, value in person.items():\n    print(f\"For loop, key: {key}, value: {value}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#for-loop-to-iterate-over-a-string","title":"For loop to iterate over a string","text":"<pre><code>message = \"Hello\"\nfor char in message:\n    print(f\"For loop, char: {char}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#for-loop-with-range","title":"For loop with range","text":"<pre><code>for i in range(5):\n    print(f\"For loop with range, i: {i}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#while-loop","title":"While loop","text":"<pre><code>count = 0\nwhile count &lt; 5:\n    print(f\"While loop, count: {count}\")\n    count += 1\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#nested-loops","title":"Nested loops","text":"<pre><code>for i in range(3):\n    for j in range(3):\n        print(f\"Nested loop, i: {i}, j: {j}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-else","title":"Loop with else","text":"<pre><code>for i in range(3):\n    print(f\"Loop with else, i: {i}\")\nelse:\n    print(\"Loop with else completed\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#while-loop-with-else","title":"While loop with else","text":"<pre><code>count = 0\nwhile count &lt; 3:\n    print(f\"While loop with else, count: {count}\")\n    count += 1\nelse:\n    print(\"While loop with else completed\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#break-in-a-loop","title":"Break in a loop","text":"<pre><code>for i in range(5):\n    if i == 3:\n        print(f\"Break in loop, breaking at i: {i}\")\n        break\n    print(f\"Break in loop, i: {i}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#continue-in-a-loop","title":"Continue in a loop","text":"<pre><code>for i in range(5):\n    if i == 3:\n        print(f\"Continue in loop, continuing at i: {i}\")\n        continue\n    print(f\"Continue in loop, i: {i}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-over-a-list-with-indices","title":"Loop over a list with indices","text":"<pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfor index, fruit in enumerate(fruits):\n    print(f\"Loop with enumerate, index: {index}, fruit: {fruit}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-zip","title":"Loop with zip","text":"<pre><code>names = [\"Alice\", \"Bob\", \"Charlie\"]\nages = [25, 30, 35]\nfor name, age in zip(names, ages):\n    print(f\"Loop with zip, name: {name}, age: {age}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#infinite-loop-commented-out-to-prevent-execution-hang","title":"Infinite loop (commented out to prevent execution hang)","text":"<pre><code> while True:\n\nprint(\"Infinite loop\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#nested-loop-with-break","title":"Nested loop with break","text":"<pre><code>for i in range(3):\n    for j in range(3):\n        if j == 1:\n            print(f\"Nested loop with break, breaking inner loop at j: {j}\")\n            break\n        print(f\"Nested loop with break, i: {i}, j: {j}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#nested-loop-with-continue","title":"Nested loop with continue","text":"<pre><code>for i in range(3):\n    for j in range(3):\n        if j == 1:\n            print(f\"Nested loop with continue, continuing inner loop at j: {j}\")\n            continue\n        print(f\"Nested loop with continue, i: {i}, j: {j}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-pass","title":"Loop with pass","text":"<pre><code>for i in range(5):\n    if i == 3:\n        print(f\"Loop with pass, pass at i: {i}\")\n        pass\n    print(f\"Loop with pass, i: {i}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#using-loops-to-create-a-list-list-comprehension","title":"Using loops to create a list (list comprehension)","text":"<pre><code>squares = [x ** 2 for x in range(5)]\nprint(f\"List comprehension, squares: {squares}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#using-loops-to-create-a-dictionary-dictionary-comprehension","title":"Using loops to create a dictionary (dictionary comprehension)","text":"<pre><code>squares_dict = {x: x ** 2 for x in range(5)}\nprint(f\"Dictionary comprehension, squares_dict: {squares_dict}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#while-loop-with-a-break","title":"While loop with a break","text":"<pre><code>count = 0\nwhile True:\n    print(f\"While loop with break, count: {count}\")\n    count += 1\n    if count == 3:\n        break\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#while-loop-with-a-continue","title":"While loop with a continue","text":"<pre><code>count = 0\nwhile count &lt; 5:\n    count += 1\n    if count == 3:\n        print(f\"While loop with continue, continuing at count: {count}\")\n        continue\n    print(f\"While loop with continue, count: {count}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-through-a-range-in-reverse","title":"Loop through a range in reverse","text":"<pre><code>for i in reversed(range(5)):\n    print(f\"Loop in reverse, i: {i}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#nested-loops-to-create-a-matrix","title":"Nested loops to create a matrix","text":"<pre><code>matrix = [[i * j for j in range(3)] for i in range(3)]\nprint(f\"Nested loop for matrix: {matrix}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-multiple-conditions","title":"Loop with multiple conditions","text":"<pre><code>for i in range(10):\n    if i % 2 == 0 and i % 3 == 0:\n        print(f\"Loop with multiple conditions, i: {i}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#using-a-loop-to-flatten-a-list-of-lists","title":"Using a loop to flatten a list of lists","text":"<pre><code>list_of_lists = [[1, 2, 3], [4, 5], [6, 7, 8]]\nflattened_list = [item for sublist in list_of_lists for item in sublist]\nprint(f\"Flattened list: {flattened_list}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#looping-over-two-ranges-simultaneously","title":"Looping over two ranges simultaneously","text":"<pre><code>for i, j in zip(range(3), range(10, 13)):\n    print(f\"Loop over two ranges, i: {i}, j: {j}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-a-set","title":"Loop with a set","text":"<pre><code>\nunique_numbers = {1, 2, 3, 4, 5}\nfor number in unique_numbers:\n    print(f\"Loop with set, number: {number}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-a-tuple","title":"Loop with a tuple","text":"<pre><code>\ntuple_values = (10, 20, 30)\nfor value in tuple_values:\n    print(f\"Loop with tuple, value: {value}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-a-boolean-condition","title":"Loop with a boolean condition","text":"<pre><code>\ni = 0\nwhile i &lt; 5:\n    print(f\"Loop with boolean condition, i: {i}\")\n    i += 1\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#nested-loops-with-multiple-levels","title":"Nested loops with multiple levels","text":"<pre><code>\nfor i in range(2):\n    for j in range(2):\n        for k in range(2):\n            print(f\"Nested loops with multiple levels, i: {i}, j: {j}, k: {k}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-a-range-step","title":"Loop with a range step","text":"<pre><code>\nfor i in range(0, 10, 2):\n    print(f\"Loop with range step, i: {i}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#using-a-loop-to-create-a-set-set-comprehension","title":"Using a loop to create a set (set comprehension)","text":"<pre><code>\nsquares_set = {x ** 2 for x in range(5)}\nprint(f\"Set comprehension, squares_set: {squares_set}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#using-a-loop-to-create-a-generator-generator-comprehension","title":"Using a loop to create a generator (generator comprehension)","text":"<pre><code>\nsquares_gen = (x ** 2 for x in range(5))\nprint(f\"Generator comprehension, squares_gen: {list(squares_gen)}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#using-a-loop-to-filter-a-list","title":"Using a loop to filter a list","text":"<pre><code>\nnumbers = [1, 2, 3, 4, 5, 6]\neven_numbers = [x for x in numbers if x % 2 == 0]\nprint(f\"Filtered list, even_numbers: {even_numbers}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-try-except","title":"Loop with try-except","text":"<pre><code>\nfor i in range(5):\n    try:\n        result = 10 / i\n    except ZeroDivisionError:\n        result = \"undefined\"\n    print(f\"Loop with try-except, i: {i}, result: {result}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#looping-over-multiple-lists-simultaneously","title":"Looping over multiple lists simultaneously","text":"<pre><code>\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nscores = [85, 90, 95]\nfor name, score in zip(names, scores):\n    print(f\"Loop over multiple lists, name: {name}, score: {score}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-a-countdown","title":"Loop with a countdown","text":"<pre><code>\nfor i in range(5, 0, -1):\n    print(f\"Countdown loop, i: {i}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#using-a-loop-to-check-for-prime-numbers","title":"Using a loop to check for prime numbers","text":"<pre><code>\nfor num in range(2, 10):\n    for i in range(2, num):\n        if num % i == 0:\n            break\n    else:\n        print(f\"Prime number found: {num}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-a-complex-condition","title":"Loop with a complex condition","text":"<pre><code>\nfor i in range(10):\n    if i % 2 == 0 or i % 3 == 0:\n        print(f\"Loop with complex condition, i: {i}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#using-a-loop-to-find-the-maximum-value-in-a-list","title":"Using a loop to find the maximum value in a list","text":"<pre><code>\nnumbers = [1, 3, 2, 8, 5, 10]\nmax_value = numbers[0]\nfor number in numbers:\n    if number &gt; max_value:\n        max_value = number\nprint(f\"Maximum value in list: {max_value}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#using-a-loop-to-reverse-a-string","title":"Using a loop to reverse a string","text":"<pre><code>\noriginal_string = \"hello\"\nreversed_string = \"\"\nfor char in original_string:\n    reversed_string = char + reversed_string\nprint(f\"Reversed string: {reversed_string}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-a-nested-function","title":"Loop with a nested function","text":"<pre><code>\ndef nested_function(x):\n    return x ** 2\n\nfor i in range(5):\n    result = nested_function(i)\n    print(f\"Loop with nested function, i: {i}, result: {result}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-a-map-function","title":"Loop with a map function","text":"<pre><code>\nnumbers = [1, 2, 3, 4, 5]\nsquares = list(map(lambda x: x ** 2, numbers))\nprint(f\"Loop with map function, squares: {squares}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-a-filter-function","title":"Loop with a filter function","text":"<pre><code>\nnumbers = [1, 2, 3, 4, 5, 6]\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\nprint(f\"Loop with filter function, even_numbers: {even_numbers}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-a-reduce-function","title":"Loop with a reduce function","text":"<pre><code>\nfrom functools import reduce\nnumbers = [1, 2, 3, 4, 5]\nsum_of_numbers = reduce(lambda x, y: x + y, numbers)\nprint(f\"Loop with reduce function, sum_of_numbers: {sum_of_numbers}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-enumerate-and-a-start-index","title":"Loop with enumerate and a start index","text":"<pre><code>\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nfor index, name in enumerate(names, start=1):\n    print(f\"Loop with enumerate and start index, index: {index}, name: {name}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-a-custom-iterator","title":"Loop with a custom iterator","text":"<pre><code>\nclass Countdown:\n    def __init__(self, start):\n        self.start = start\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.start &lt;= 0:\n            raise StopIteration\n        self.start -= 1\n        return self.start + 1\n\nfor count in Countdown(5):\n    print(f\"Loop with custom iterator, count: {count}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-a-generator-function","title":"Loop with a generator function","text":"<pre><code>\ndef countdown_generator(n):\n    while n &gt; 0:\n        yield n\n        n -= 1\n\nfor count in countdown_generator(5):\n    print(f\"Loop with generator function, count: {count}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-a-list-of-tuples","title":"Loop with a list of tuples","text":"<pre><code>\ntuple_list = [(1, 2), (3, 4), (5, 6)]\nfor a, b in tuple_list:\n    print(f\"Loop with list of tuples, a: {a}, b: {b}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-minimum-value-in-a-list","title":"Loop to find the minimum value in a list","text":"<pre><code>\nnumbers = [1, 3, 2, 8, 5, 10]\nmin_value = numbers[0]\nfor number in numbers:\n    if number &lt; min_value:\n        min_value = number\nprint(f\"Minimum value in list: {min_value}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-calculate-the-factorial-of-a-number","title":"Loop to calculate the factorial of a number","text":"<pre><code>\nn = 5\nfactorial = 1\nfor i in range(1, n + 1):\n    factorial *= i\nprint(f\"Factorial of {n}: {factorial}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-calculate-the-fibonacci-sequence","title":"Loop to calculate the Fibonacci sequence","text":"<pre><code>\nn = 10\na, b = 0, 1\nfib_sequence = []\nfor _ in range(n):\n    fib_sequence.append(a)\n    a, b = b, a + b\nprint(f\"Fibonacci sequence: {fib_sequence}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-dictionary-comprehension","title":"Loop with dictionary comprehension","text":"<pre><code>\nsquares_dict = {x: x ** 2 for x in range(5)}\nprint(f\"Dictionary comprehension, squares_dict: {squares_dict}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-remove-duplicates-from-a-list","title":"Loop to remove duplicates from a list","text":"<pre><code>\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nunique_numbers = []\nfor number in numbers:\n    if number not in unique_numbers:\n        unique_numbers.append(number)\nprint(f\"List without duplicates: {unique_numbers}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-transpose-a-matrix","title":"Loop to transpose a matrix","text":"<pre><code>\nmatrix = [[1, 2, 3], [4, 5, 6]]\ntransposed_matrix = []\nfor i in range(len(matrix[0])):\n    transposed_matrix.append([row[i] for row in matrix])\nprint(f\"Transposed matrix: {transposed_matrix}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-string-formatting","title":"Loop with string formatting","text":"<pre><code>\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nfor index, name in enumerate(names):\n    print(f\"Person {index + 1}: {name}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-a-set-comprehension","title":"Loop with a set comprehension","text":"<pre><code>\nsquares_set = {x ** 2 for x in range(5)}\nprint(f\"Set comprehension, squares_set: {squares_set}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-a-generator-expression","title":"Loop with a generator expression","text":"<pre><code>\nsquares_gen = (x ** 2 for x in range(5))\nprint(f\"Generator expression, squares_gen: {list(squares_gen)}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-list-slicing","title":"Loop with list slicing","text":"<pre><code>\nnumbers = [1, 2, 3, 4, 5]\nfor number in numbers[::-1]:\n    print(f\"Loop with list slicing, number: {number}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-list-slicing-to-reverse","title":"Loop with list slicing to reverse","text":"<pre><code>\nnumbers = [1, 2, 3, 4, 5]\nreversed_numbers = numbers[::-1]\nprint(f\"Reversed list with slicing: {reversed_numbers}\")\n\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-with-a-step-size-in-range","title":"Loop with a step size in range","text":"<pre><code>\nfor i in range(0, 10, 2):\n    print(f\"Loop with step size in range, i: {i}\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-merge-two-lists","title":"Loop to merge two lists","text":"<pre><code>\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nmerged_list = []\nfor a, b in zip(list1, list2):\n    merged_list.append(a)\n    merged_list.append(b)\nprint(f\"Merged list: {merged_list}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-common-elements-in-two-lists","title":"Loop to find common elements in two lists","text":"<pre><code>\nlist1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]\ncommon_elements = [x for x in list1 if x in list2]\nprint(f\"Common elements in two lists: {common_elements}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-calculate-the-power-of-numbers","title":"Loop to calculate the power of numbers","text":"<pre><code>\nnumbers = [1, 2, 3, 4, 5]\npowers = [x ** 2 for x in numbers]\nprint(f\"Powers of numbers: {powers}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-separate-even-and-odd-numbers","title":"Loop to separate even and odd numbers","text":"<pre><code>\nnumbers = [1, 2, 3, 4, 5, 6]\neven_numbers = []\nodd_numbers = []\nfor number in numbers:\n    if number % 2 == 0:\n        even_numbers.append(number)\n    else:\n        odd_numbers.append(number)\nprint(f\"Even numbers: {even_numbers}\")\nprint(f\"Odd numbers: {odd_numbers}\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-create-a-list-of-tuples","title":"Loop to create a list of tuples","text":"<pre><code>\ntuple_list = [(x, x ** 2) for x in range(5)]\nprint(f\"List of tuples: {tuple_list}\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-calculate-the-sum-of-digits-of-a-number","title":"Loop to calculate the sum of digits of a number","text":"<pre><code>\nnumber = 12345\nsum_of_digits = 0\nfor digit in str(number):\n    sum_of_digits += int(digit)\nprint(f\"Sum of digits: {sum_of_digits}\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-create-a-multiplication-table","title":"Loop to create a multiplication table","text":"<pre><code>\nn = 5\nmultiplication_table = [[i * j for j in range(1, n + 1)] for i in range(1, n + 1)]\nprint(f\"Multiplication table:\")\nfor row in multiplication_table:\n    print(row)\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-length-of-a-string","title":"Loop to find the length of a string","text":"<pre><code>\nstring = \"Hello, world!\"\nlength = 0\nfor _ in string:\n    length += 1\nprint(f\"Length of the string: {length}\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-count-the-occurrences-of-a-character-in-a-string","title":"Loop to count the occurrences of a character in a string","text":"<pre><code>\nstring = \"hello world\"\nchar = 'l'\ncount = 0\nfor c in string:\n    if c == char:\n        count += 1\nprint(f\"Occurrences of '{char}' in the string: {count}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-index-of-an-element-in-a-list","title":"Loop to find the index of an element in a list","text":"<pre><code>\nnumbers = [10, 20, 30, 40, 50]\ntarget = 30\nfor index, number in enumerate(numbers):\n    if number == target:\n        print(f\"Index of {target} in the list: {index}\")\n        break\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-maximum-value-in-a-list-of-tuples","title":"Loop to find the maximum value in a list of tuples","text":"<pre><code>\ntuple_list = [(1, 2), (3, 4), (5, 6)]\nmax_value = max(tuple_list, key=lambda x: x[1])\nprint(f\"Maximum value in list of tuples: {max_value}\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-common-characters-in-two-strings","title":"Loop to find the common characters in two strings","text":"<pre><code>\nstring1 = \"hello\"\nstring2 = \"world\"\ncommon_chars = [char for char in string1 if char in string2]\nprint(f\"Common characters in strings: {common_chars}\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-create-a-dictionary-of-counts-of-elements-in-a-list","title":"Loop to create a dictionary of counts of elements in a list","text":"<pre><code>\nnumbers = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\ncounts = {}\nfor number in numbers:\n    if number in counts:\n        counts[number] += 1\n    else:\n        counts[number] = 1\nprint(f\"Dictionary of counts: {counts}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-create-a-list-of-prime-numbers","title":"Loop to create a list of prime numbers","text":"<pre><code>\nprime_numbers = []\nfor num in range(2, 20):\n    for i in range(2, num):\n        if num % i == 0:\n            break\n    else:\n        prime_numbers.append(num)\nprint(f\"List of prime numbers: {prime_numbers}\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-calculate-the-sum-of-elements-in-a-nested-list","title":"Loop to calculate the sum of elements in a nested list","text":"<pre><code>\nnested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ntotal_sum = 0\nfor sublist in nested_list:\n    for item in sublist:\n        total_sum += item\nprint(f\"Sum of elements in nested list: {total_sum}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-count-the-number-of-vowels-in-a-string","title":"Loop to count the number of vowels in a string","text":"<pre><code>\nstring = \"hello world\"\nvowels = \"aeiou\"\nvowel_count = 0\nfor char in string:\n    if char in vowels:\n        vowel_count += 1\nprint(f\"Number of vowels in string: {vowel_count}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-intersection-of-two-sets","title":"Loop to find the intersection of two sets","text":"<pre><code>\nset1 = {1, 2, 3, 4, 5}\nset2 = {4, 5, 6, 7, 8}\nintersection = set1 &amp; set2\nprint(f\"Intersection of sets: {intersection}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-difference-of-two-sets","title":"Loop to find the difference of two sets","text":"<pre><code>\ndifference = set1 - set2\nprint(f\"Difference of sets: {difference}\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-symmetric-difference-of-two-sets","title":"Loop to find the symmetric difference of two sets","text":"<pre><code>\nsymmetric_difference = set1 ^ set2\nprint(f\"Symmetric difference of sets: {symmetric_difference}\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-count-the-occurrences-of-words-in-a-string","title":"Loop to count the occurrences of words in a string","text":"<pre><code>\nstring = \"hello hello world\"\nwords = string.split()\nword_counts = {}\nfor word in words:\n    if word in word_counts:\n        word_counts[word] += 1\n    else:\n        word_counts[word] = 1\nprint(f\"Word counts: {word_counts}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-create-a-list-of-even-numbers-from-1-to-20","title":"Loop to create a list of even numbers from 1 to 20","text":"<pre><code>\neven_numbers = [x for x in range(1, 21) if x % 2 == 0]\nprint(f\"List of even numbers: {even_numbers}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-create-a-list-of-odd-numbers-from-1-to-20","title":"Loop to create a list of odd numbers from 1 to 20","text":"<pre><code>\nodd_numbers = [x for x in range(1, 21) if x % 2 != 0]\nprint(f\"List of odd numbers: {odd_numbers}\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-create-a-list-of-squares-of-numbers-from-1-to-10","title":"Loop to create a list of squares of numbers from 1 to 10","text":"<pre><code>\nsquares = [x ** 2 for x in range(1, 11)]\nprint(f\"Squares of numbers from 1 to 10: {squares}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-sum-of-squares-of-numbers-from-1-to-10","title":"Loop to find the sum of squares of numbers from 1 to 10","text":"<pre><code>\nsum_of_squares = sum(x ** 2 for x in range(1, 11))\nprint(f\"Sum of squares from 1 to 10: {sum_of_squares}\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-factorial-of-a-number-using-recursion","title":"Loop to find the factorial of a number using recursion","text":"<pre><code>\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(f\"Factorial of 5 using recursion: {factorial(5)}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-greatest-common-divisor-gcd-of-two-numbers","title":"Loop to find the greatest common divisor (GCD) of two numbers","text":"<pre><code>\na, b = 48, 18\nwhile b:\n    a, b = b, a % b\nprint(f\"GCD of 48 and 18: {a}\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-least-common-multiple-lcm-of-two-numbers","title":"Loop to find the least common multiple (LCM) of two numbers","text":"<pre><code>\na, b = 48, 18\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nlcm = (a * b) // gcd(a, b)\nprint(f\"LCM of 48 and 18: {lcm}\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-create-a-dictionary-from-two-lists","title":"Loop to create a dictionary from two lists","text":"<pre><code>\nkeys = [\"name\", \"age\", \"city\"]\nvalues = [\"Alice\", 30, \"New York\"]\ndictionary = dict(zip(keys, values))\nprint(f\"Dictionary from two lists: {dictionary}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-longest-word-in-a-string","title":"Loop to find the longest word in a string","text":"<pre><code>\nstring = \"hello world this is a test\"\nwords = string.split()\nlongest_word = max(words, key=len)\nprint(f\"Longest word in string: {longest_word}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-shortest-word-in-a-string","title":"Loop to find the shortest word in a string","text":"<pre><code>\nshortest_word = min(words, key=len)\nprint(f\"Shortest word in string: {shortest_word}\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-sum-of-odd-numbers-from-1-to-10","title":"Loop to find the sum of odd numbers from 1 to 10","text":"<pre><code>\nsum_of_odds = sum(x for x in range(1, 11) if x % 2 != 0)\nprint(f\"Sum of odd numbers from 1 to 10: {sum_of_odds}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-product-of-even-numbers-from-1-to-10","title":"Loop to find the product of even numbers from 1 to 10","text":"<pre><code>\nproduct_of_evens = 1\nfor x in range(1, 11):\n    if x % 2 == 0:\n        product_of_evens *= x\nprint(f\"Product of even numbers from 1 to 10: {product_of_evens}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-create-a-dictionary-of-squares-of-numbers-from-1-to-5","title":"Loop to create a dictionary of squares of numbers from 1 to 5","text":"<pre><code>\nsquares_dict = {x: x ** 2 for x in range(1, 6)}\nprint(f\"Dictionary of squares: {squares_dict}\")\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-create-a-list-of-cubes-of-numbers-from-1-to-5","title":"Loop to create a list of cubes of numbers from 1 to 5","text":"<pre><code>\ncubes = [x ** 3 for x in range(1, 6)]\nprint(f\"List of cubes: {cubes}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-sum-of-cubes-of-numbers-from-1-to-5","title":"Loop to find the sum of cubes of numbers from 1 to 5","text":"<pre><code>\nsum_of_cubes = sum(x ** 3 for x in range(1, 6))\nprint(f\"Sum of cubes: {sum_of_cubes}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-create-a-list-of-factorials-from-1-to-5","title":"Loop to create a list of factorials from 1 to 5","text":"<pre><code>\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nfactorials = [factorial(x) for x in range(1, 6)]\nprint(f\"List of factorials: {factorials}\")\n\n</code></pre>"},{"location":"Python_All_types%20_of_loops/#loop-to-find-the-sum-of-factorials-from-1-to-5","title":"Loop to find the sum of factorials from 1 to 5","text":"<pre><code>\nsum_of_factorials = sum(factorials)\nprint(f\"Sum of factorials: {sum_of_factorials}\")\n</code></pre>"},{"location":"django_resetAPI/","title":"django resetAPI","text":"<p>Creating a REST API with Django involves several steps, including setting up your Django project, installing and configuring Django REST framework, creating your models, serializers, views, and configuring URLs. Here\u2019s a step-by-step guide to help you through the process:</p>"},{"location":"django_resetAPI/#step-1-set-up-your-django-project","title":"Step 1: Set Up Your Django Project","text":"<ol> <li> <p>Install Django and Django REST Framework:    First, you need to install Django and Django REST framework if you haven't already.    <code>bash    pip install django djangorestframework</code></p> </li> <li> <p>Create a Django Project:    <code>bash    django-admin startproject myproject    cd myproject</code></p> </li> <li> <p>Create a Django App:    <code>bash    python manage.py startapp myapp</code></p> </li> <li> <p>Add the App and REST Framework to <code>settings.py</code>:    In <code>myproject/settings.py</code>, add <code>'rest_framework'</code> and your app to the <code>INSTALLED_APPS</code> list.    <code>python    INSTALLED_APPS = [        ...        'rest_framework',        'myapp',    ]</code></p> </li> </ol>"},{"location":"django_resetAPI/#step-2-create-your-models","title":"Step 2: Create Your Models","text":"<ol> <li>Define Models:    Open <code>myapp/models.py</code> and define your models. For example:    ```python    from django.db import models</li> </ol> <p>class Item(models.Model):        name = models.CharField(max_length=100)        description = models.TextField()        created_at = models.DateTimeField(auto_now_add=True)</p> <pre><code>   def __str__(self):\n       return self.name\n</code></pre> <p>```</p> <ol> <li>Run Migrations:    <code>bash    python manage.py makemigrations    python manage.py migrate</code></li> </ol>"},{"location":"django_resetAPI/#step-3-create-serializers","title":"Step 3: Create Serializers","text":"<ol> <li>Define Serializers:    Create a file named <code>serializers.py</code> in your app directory and define your serializers. For example:    ```python    from rest_framework import serializers    from .models import Item</li> </ol> <p>class ItemSerializer(serializers.ModelSerializer):        class Meta:            model = Item            fields = 'all'    ```</p>"},{"location":"django_resetAPI/#step-4-create-views","title":"Step 4: Create Views","text":"<ol> <li>Define Views:    Open <code>myapp/views.py</code> and define your API views. For example:    ```python    from rest_framework import generics    from .models import Item    from .serializers import ItemSerializer</li> </ol> <p>class ItemListCreate(generics.ListCreateAPIView):        queryset = Item.objects.all()        serializer_class = ItemSerializer</p> <p>class ItemDetail(generics.RetrieveUpdateDestroyAPIView):        queryset = Item.objects.all()        serializer_class = ItemSerializer    ```</p>"},{"location":"django_resetAPI/#step-5-configure-urls","title":"Step 5: Configure URLs","text":"<ol> <li>Define URLs:    Create a file named <code>urls.py</code> in your app directory and define your URL patterns. For example:    ```python    from django.urls import path    from .views import ItemListCreate, ItemDetail</li> </ol> <p>urlpatterns = [        path('items/', ItemListCreate.as_view(), name='item-list-create'),        path('items//', ItemDetail.as_view(), name='item-detail'),    ]    ``` <ol> <li>Include App URLs in Project URLs:    Open <code>myproject/urls.py</code> and include your app URLs.    ```python    from django.contrib import admin    from django.urls import path, include</li> </ol> <p>urlpatterns = [        path('admin/', admin.site.urls),        path('api/', include('myapp.urls')),    ]    ```</p>"},{"location":"django_resetAPI/#step-6-test-your-api","title":"Step 6: Test Your API","text":"<ol> <li> <p>Run the Development Server:    <code>bash    python manage.py runserver</code></p> </li> <li> <p>Test Endpoints:    You can use tools like Postman or cURL to test your API endpoints. For example:</p> </li> <li>To list items: <code>GET http://127.0.0.1:8000/api/items/</code></li> <li>To create an item: <code>POST http://127.0.0.1:8000/api/items/</code></li> <li>To retrieve an item: <code>GET http://127.0.0.1:8000/api/items/&lt;id&gt;/</code></li> <li>To update an item: <code>PUT http://127.0.0.1:8000/api/items/&lt;id&gt;/</code></li> <li>To delete an item: <code>DELETE http://127.0.0.1:8000/api/items/&lt;id&gt;/</code></li> </ol>"},{"location":"django_resetAPI/#additional-configurations","title":"Additional Configurations","text":"<ol> <li> <p>Set Up Permissions:    You can configure permissions in your views to control access.</p> </li> <li> <p>Add Authentication:    Add authentication mechanisms as needed, such as token-based authentication.</p> </li> <li> <p>Pagination:    Configure pagination settings in <code>settings.py</code> if your API requires it.</p> </li> </ol>"},{"location":"django_resetAPI/#example-settingspy-for-rest-framework","title":"Example <code>settings.py</code> for REST Framework","text":"<pre><code>REST_FRAMEWORK = {\n   'DEFAULT_PERMISSION_CLASSES': [\n       'rest_framework.permissions.AllowAny',\n   ],\n   'DEFAULT_AUTHENTICATION_CLASSES': [\n       'rest_framework.authentication.SessionAuthentication',\n       'rest_framework.authentication.BasicAuthentication',\n   ],\n   'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n   'PAGE_SIZE': 10\n}\n</code></pre> <p>This is a basic setup to get you started with Django and Django REST framework for creating a REST API. You can further customize it based on your specific requirements.</p>"},{"location":"interview/","title":"Interview Preparation","text":"<p>Prepare for your Python interviews with these questions and solutions.</p>"},{"location":"learning/","title":"Learning Resources","text":"<p>Explore Python tutorials, articles, and guides to improve your coding expertise.</p>"},{"location":"programs/","title":"Weekly Python Programs","text":""},{"location":"programs/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Basic Programs</li> <li>Advanced Programs</li> </ul>"},{"location":"programs/#basic-programs","title":"Basic Programs","text":"<ul> <li>Hello World</li> <li>Factorial</li> </ul>"},{"location":"programs/#advanced-programs","title":"Advanced Programs","text":"<ul> <li>Sorting Algorithms</li> </ul>"},{"location":"quizzes/","title":"Python Quizzes","text":"<p>Test your Python knowledge with these quizzes.</p>"}]}